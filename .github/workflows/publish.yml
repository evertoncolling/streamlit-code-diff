name: Build and Publish to PyPI

on:
  push:
    branches: [main]
    paths: [pyproject.toml]
  workflow_dispatch:  # Allow manual trigger

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-publish: ${{ steps.version.outputs.should-publish }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit to compare

      - name: Check if version changed
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(grep -E '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"

          # Get previous version (if exists)
          git show HEAD~1:pyproject.toml > prev_pyproject.toml 2>/dev/null || echo 'version = "0.0.0"' > prev_pyproject.toml
          PREV_VERSION=$(grep -E '^version = ' prev_pyproject.toml | sed 's/version = "\(.*\)"/\1/' || echo "0.0.0")
          echo "Previous version: $PREV_VERSION"

          # Check if version changed
          if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
            echo "Version changed from $PREV_VERSION to $CURRENT_VERSION"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged, skipping publish"
            echo "should-publish=false" >> $GITHUB_OUTPUT
          fi

          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

  build-and-publish:
    needs: check-version
    if: needs.check-version.outputs.should-publish == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: src/streamlit_code_diff/frontend/package-lock.json

      - name: Set up Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Install frontend dependencies
        run: |
          cd src/streamlit_code_diff/frontend
          npm ci

      - name: Build frontend
        run: |
          cd src/streamlit_code_diff/frontend
          npm run build

      - name: Install Python dependencies
        run: uv sync

      - name: Build Python package
        run: uv build

      - name: Test installation
        run: |
          uv pip install dist/*.whl --force-reinstall
          python -c "from streamlit_code_diff import st_code_diff; print('‚úÖ Package imports successfully')"

      - name: Publish to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          uv publish --repository testpypi dist/* || echo "‚ö†Ô∏è Test PyPI publish failed (might be duplicate version)"

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: uv publish dist/*

      - name: Create Git Tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag "v${{ needs.check-version.outputs.version }}"
          git push origin "v${{ needs.check-version.outputs.version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ needs.check-version.outputs.version }}"
          release_name: "Release v${{ needs.check-version.outputs.version }}"
          body: |
            ## üöÄ Release v${{ needs.check-version.outputs.version }}
            
            **Published to PyPI:** https://pypi.org/project/streamlit-code-diff/${{ needs.check-version.outputs.version }}/
            
            ### Install
            ```bash
            pip install streamlit-code-diff==${{ needs.check-version.outputs.version }}
            ```
            
            ### Changes
            This release was automatically generated from the version bump in `pyproject.toml`.
          draft: false
          prerelease: false 