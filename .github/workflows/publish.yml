name: Build and Publish to PyPI

on:
  push:
    branches: [main]
    paths: [pyproject.toml]
  workflow_dispatch:  # Allow manual trigger to re-attempt failed releases
  schedule:
    - cron: '0 12 * * 1'  # Weekly check on Mondays at 12:00 UTC to catch any missed releases

jobs:
  check-version:
    # Smart version checking: compares current pyproject.toml version against PyPI and GitHub releases
    # This allows re-running failed releases without bumping version numbers
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-publish: ${{ steps.version.outputs.should-publish }}
    steps:
      - uses: actions/checkout@v4

      - name: Check if version needs publishing
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(grep -E '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"

          # Check if version exists on PyPI
          PYPI_EXISTS=false
          if curl -s "https://pypi.org/pypi/streamlit-code-diff/$CURRENT_VERSION/json" | grep -q '"version"'; then
            echo "✅ Version $CURRENT_VERSION already exists on PyPI"
            PYPI_EXISTS=true
          else
            echo "❌ Version $CURRENT_VERSION does not exist on PyPI"
          fi

          # Check if GitHub release exists
          GITHUB_RELEASE_EXISTS=false
          if curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$CURRENT_VERSION" | grep -q '"tag_name"'; then
            echo "✅ GitHub release v$CURRENT_VERSION already exists"
            GITHUB_RELEASE_EXISTS=true
          else
            echo "❌ GitHub release v$CURRENT_VERSION does not exist"
          fi

          # Decide whether to publish
          if [ "$PYPI_EXISTS" = "true" ] && [ "$GITHUB_RELEASE_EXISTS" = "true" ]; then
            echo "📦 Version $CURRENT_VERSION already published to both PyPI and GitHub releases, skipping"
            echo "should-publish=false" >> $GITHUB_OUTPUT
          elif [ "$PYPI_EXISTS" = "true" ] && [ "$GITHUB_RELEASE_EXISTS" = "false" ]; then
            echo "🏷️ Version $CURRENT_VERSION exists on PyPI but missing GitHub release, will create release only"
            echo "should-publish=github-only" >> $GITHUB_OUTPUT
          elif [ "$PYPI_EXISTS" = "false" ]; then
            echo "🚀 Version $CURRENT_VERSION needs to be published to PyPI (and GitHub release)"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          else
            echo "🤔 Unexpected state, will publish to be safe"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          fi

          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

  build-and-publish:
    needs: check-version
    if: needs.check-version.outputs.should-publish != 'false'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Show publish plan
        run: |
          echo "🎯 Publish Plan for v${{ needs.check-version.outputs.version }}:"
          if [ "${{ needs.check-version.outputs.should-publish }}" = "true" ]; then
            echo "  📦 Will publish to PyPI"
            echo "  🏷️ Will create GitHub release"
          elif [ "${{ needs.check-version.outputs.should-publish }}" = "github-only" ]; then
            echo "  ⏭️ Will skip PyPI (already published)"
            echo "  🏷️ Will create GitHub release"
          else
            echo "  ❓ Unexpected state: ${{ needs.check-version.outputs.should-publish }}"
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: src/streamlit_code_diff/frontend/package-lock.json

      - name: Set up Python and uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install frontend dependencies
        run: |
          cd src/streamlit_code_diff/frontend
          npm ci

      - name: Build frontend
        run: |
          cd src/streamlit_code_diff/frontend
          npm run build

      - name: Install Python dependencies
        run: uv sync --frozen

      - name: Build Python package
        run: uv build --wheel

      - name: Verify frontend files in wheel
        run: |
          echo "Checking wheel contents for frontend build files..."
          uv run python -m zipfile -l dist/*.whl | grep -E "build|bundle" || (echo "❌ Frontend build files missing from wheel" && exit 1)
          echo "✅ Frontend build files found in wheel"

      - name: Test installation
        run: |
          uv pip install dist/*.whl --force-reinstall
          uv run python -c "from streamlit_code_diff import st_code_diff; print('✅ Package imports successfully')"

      - name: Check package metadata
        run: |
          uv run python -c "
          import importlib.metadata
          try:
              dist = importlib.metadata.distribution('streamlit-code-diff')
              print(f'✅ Package version: {dist.version}')
              print(f'✅ Package name: {dist.metadata['Name']}')
          except importlib.metadata.PackageNotFoundError:
              print('❌ Package not found')
              exit(1)
          "

      - name: Publish to PyPI
        if: needs.check-version.outputs.should-publish == 'true'
        env:
          UV_PUBLISH_USERNAME: __token__
          UV_PUBLISH_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: uv publish dist/*

      - name: Create Git Tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag "v${{ needs.check-version.outputs.version }}"
          git push origin "v${{ needs.check-version.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ needs.check-version.outputs.version }}"
          name: "Release v${{ needs.check-version.outputs.version }}"
          body: |
            ## 🚀 Release v${{ needs.check-version.outputs.version }}
            
            **📦 Published to PyPI:** https://pypi.org/project/streamlit-code-diff/${{ needs.check-version.outputs.version }}/
            
            ### 🛠️ Installation
            ```bash
            pip install streamlit-code-diff==${{ needs.check-version.outputs.version }}
            ```
            
            ### 📝 Changes
            Check the commit history for detailed changes in this release.
            
            ### 🔗 Links
            - [PyPI Package](https://pypi.org/project/streamlit-code-diff/${{ needs.check-version.outputs.version }}/)
            - [Documentation](https://github.com/evertoncolling/streamlit-code-diff#readme)
            - [Issues](https://github.com/evertoncolling/streamlit-code-diff/issues)
          draft: false
          prerelease: false
          files: |
            dist/*.whl
            dist/*.tar.gz 